{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jugnu (Fire-Fly) Fire flies are called Jugnu in Hindi. Jugnu framework is the JavaScript framework for developing Firebase Applications","title":"Jugnu"},{"location":"#jugnu-fire-fly","text":"Fire flies are called Jugnu in Hindi. Jugnu framework is the JavaScript framework for developing Firebase Applications","title":"Jugnu (Fire-Fly)"},{"location":"annotations/","text":"Annotation Details FirebaseCollection() Annotate a class with @FirebaseCollection() . If no parameter is provided, then the class name is taken as the Collection name. If a parameter (of type string) is provided, then the parameter value is taken as Collection Name For e.g. @FirebaseCollection('StudentCollection') class Student{ } In this case the firebase collection is created with name: StudentCollection DocumentKey Annotate a property with @DocumentKey This property is used as the key of the document. DocumentField Annotate a property with @DocumentField If any property is NOT annotated with this annotation, this field will NOT be saved in the document. This gives users the flexibility to skip some fields which are not to be saved in documents. StorageFile Annotate a property with @StorageFile Properties annotated like this will be considered as storage file. They will be uploaded into the Storage bucket. The fields should be of type: jugnu.Types.StorageFile The type definition is as follows: interface StorageFile{ name: String, // Name of file uri: String // The file path }","title":"Annotation Details"},{"location":"annotations/#annotation-details","text":"","title":"Annotation Details"},{"location":"annotations/#firebasecollection","text":"Annotate a class with @FirebaseCollection() . If no parameter is provided, then the class name is taken as the Collection name. If a parameter (of type string) is provided, then the parameter value is taken as Collection Name For e.g. @FirebaseCollection('StudentCollection') class Student{ } In this case the firebase collection is created with name: StudentCollection","title":"FirebaseCollection()"},{"location":"annotations/#documentkey","text":"Annotate a property with @DocumentKey This property is used as the key of the document.","title":"DocumentKey"},{"location":"annotations/#documentfield","text":"Annotate a property with @DocumentField If any property is NOT annotated with this annotation, this field will NOT be saved in the document. This gives users the flexibility to skip some fields which are not to be saved in documents.","title":"DocumentField"},{"location":"annotations/#storagefile","text":"Annotate a property with @StorageFile Properties annotated like this will be considered as storage file. They will be uploaded into the Storage bucket. The fields should be of type: jugnu.Types.StorageFile The type definition is as follows: interface StorageFile{ name: String, // Name of file uri: String // The file path }","title":"StorageFile"},{"location":"basic_usage/","text":"Usage Jugnu is compaitable with other Javascript frameworks. Annotations Annotate your typescript classes and members. Create any class that represents an entity. @FirebaseCollection() class Person{ @DocumentKey name: String; @DocumentField age: Number; location?: String; @DocumentField phone: String; constructor(name: String){ this.name = name; } } Create Document const personCollection = jugnu.createFirebaseCollection(Person); const varun = new Person(\"Varun Verma\"); varun.age = 25; varun.location = \"India\"; varun.phone = \"+91-1234567890\"; personCollection.create(varun); Query Documents const personList: Person[]; personList = await personCollection.query([]); console.log(personList); Query Single Document with Key let p: Person; p = await personCollection.getDocument(\"Varun Verma\"); console.log(\"Person Details\", p); Delete Document await personCollection.delete(varun);","title":"Usage"},{"location":"basic_usage/#usage","text":"Jugnu is compaitable with other Javascript frameworks.","title":"Usage"},{"location":"basic_usage/#annotations","text":"Annotate your typescript classes and members. Create any class that represents an entity. @FirebaseCollection() class Person{ @DocumentKey name: String; @DocumentField age: Number; location?: String; @DocumentField phone: String; constructor(name: String){ this.name = name; } }","title":"Annotations"},{"location":"basic_usage/#create-document","text":"const personCollection = jugnu.createFirebaseCollection(Person); const varun = new Person(\"Varun Verma\"); varun.age = 25; varun.location = \"India\"; varun.phone = \"+91-1234567890\"; personCollection.create(varun);","title":"Create Document"},{"location":"basic_usage/#query-documents","text":"const personList: Person[]; personList = await personCollection.query([]); console.log(personList);","title":"Query Documents"},{"location":"basic_usage/#query-single-document-with-key","text":"let p: Person; p = await personCollection.getDocument(\"Varun Verma\"); console.log(\"Person Details\", p);","title":"Query Single Document with Key"},{"location":"basic_usage/#delete-document","text":"await personCollection.delete(varun);","title":"Delete Document"},{"location":"installation/","text":"Installation Include jugnu in your package.json OR Install it : npm install @fire-fly/jugnu","title":"Installation"},{"location":"installation/#installation","text":"Include jugnu in your package.json OR Install it : npm install @fire-fly/jugnu","title":"Installation"},{"location":"limitations/","text":"Known Limitations","title":"Limitations"},{"location":"limitations/#known-limitations","text":"","title":"Known Limitations"},{"location":"reference_collections/","text":"Reference Collections Firebase allows you to reference documents of other collections. Consider the example below of Person and Anddress @FirebaseCollection() class Address { @DocumentKey addrKey: String = \"\"; @DocumentField streetName?: String; @DocumentField houseNumer?: String; } The Person document has a address field that stores reference to the address @FirebaseCollection() class Person{ @DocumentKey name: String; @DocumentField age: Number; location?: String; @DocumentField phone: String; @DocumentField homeAddress?: Address; constructor(name: String){ this.name = name; } } Create Document Create the address by the normal method. const addressCollection = jugnu.createFirebaseCollection(Address); const addr = new Address(); addr.addrKey = \"Varun-Addr\"; addr.streetName = \"My Street Address\"; addr.houseNumer = \"My House No\"; addressCollection.create(addr); // Create new Address Create person, with reference to Address. const personCollection = jugnu.createFirebaseCollection(Person); const varun = new Person(\"Varun Verma\"); varun.age = 25; varun.location = \"India\"; varun.phone = \"+91-1234567890\"; varun.homeAddress = addr; // Set address in Person personCollection.create(varun); The person document is created with Address as a reference document Query Single Document with Key Querying document will also query the referenced documents and populate their properties. let p: Person; p = await personCollection.getDocument(\"Varun Verma\"); console.log(\"Person Details\", p); The output will be: Person { age: 25, phone: '+91-1234567890', homeAddress: { houseNumer: 'My House No', addrKey: 'Varun-Addr', streetName: 'My Street Address' }, name: 'Varun Verma' } Delete Document Delete will delete only the main document. The referenced document will not be deleted.","title":"Reference Collections"},{"location":"reference_collections/#reference-collections","text":"Firebase allows you to reference documents of other collections. Consider the example below of Person and Anddress @FirebaseCollection() class Address { @DocumentKey addrKey: String = \"\"; @DocumentField streetName?: String; @DocumentField houseNumer?: String; } The Person document has a address field that stores reference to the address @FirebaseCollection() class Person{ @DocumentKey name: String; @DocumentField age: Number; location?: String; @DocumentField phone: String; @DocumentField homeAddress?: Address; constructor(name: String){ this.name = name; } }","title":"Reference Collections"},{"location":"reference_collections/#create-document","text":"Create the address by the normal method. const addressCollection = jugnu.createFirebaseCollection(Address); const addr = new Address(); addr.addrKey = \"Varun-Addr\"; addr.streetName = \"My Street Address\"; addr.houseNumer = \"My House No\"; addressCollection.create(addr); // Create new Address Create person, with reference to Address. const personCollection = jugnu.createFirebaseCollection(Person); const varun = new Person(\"Varun Verma\"); varun.age = 25; varun.location = \"India\"; varun.phone = \"+91-1234567890\"; varun.homeAddress = addr; // Set address in Person personCollection.create(varun); The person document is created with Address as a reference document","title":"Create Document"},{"location":"reference_collections/#query-single-document-with-key","text":"Querying document will also query the referenced documents and populate their properties. let p: Person; p = await personCollection.getDocument(\"Varun Verma\"); console.log(\"Person Details\", p); The output will be: Person { age: 25, phone: '+91-1234567890', homeAddress: { houseNumer: 'My House No', addrKey: 'Varun-Addr', streetName: 'My Street Address' }, name: 'Varun Verma' }","title":"Query Single Document with Key"},{"location":"reference_collections/#delete-document","text":"Delete will delete only the main document. The referenced document will not be deleted.","title":"Delete Document"}]}